/*
모든 시행을 해보면 된다.
무너지는 모래성을 queue에 넣고, 거기에 인접한 성들만 다음 파도에서 재고려 하면 됨
파도가 끝날 때마다 무너진 모래성을 갱신해야함
각 모래성 위치의 평지 수를 cnt 배열에 따로 저장함
*/
#include <bits/stdc++.h>
#define ll long long
#define endl "\n"

using namespace std;

ll h, w, ans;
vector <vector<ll>> board, cnt;
queue <pair<ll, ll>> q;

ll dx[]={0, 1, 1, 1, 0, -1, -1, -1};
ll dy[]={1, 1, 0, -1, -1, -1, 0, 1};

void bfs()
{
    while(!q.empty())
    {
        ans++;
        queue<pair<ll, ll>> cur=q;
        q=queue <pair<ll, ll>>();

        while(!cur.empty())
        {
            
            ll y=cur.front().first;
            ll x=cur.front().second;
            cur.pop();

            for(ll i=0; i<8; i++){
                ll nx=x+dx[i];
                ll ny=y+dy[i];

                if(board[ny][nx]!=-1&&board[ny][nx]<=++cnt[ny][nx]){
                    board[ny][nx]=-1;
                    q.push({ny, nx});
                }
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin>>h>>w;
    board.resize(h+2, vector<ll>(w+2, -1));
    cnt.resize(h+2, vector<ll>(w+2, -1));

    for(ll i=1; i<=h; i++)
    {
        for(ll j=1; j<=w; j++)
        {
            char c;
            cin>>c;
            if(c=='.') board[i][j]=-1;
            else
            {
                board[i][j]=c-'0';
            }
        }
    }

    for(ll i=1; i<=h; i++)
    {
        for(ll j=1; j<=w; j++)
        {
            if(board[i][j]!=-1)
            {
                 for(ll k=0; k<8; k++)
            {
                ll ny=i+dy[k];
                ll nx=j+dx[k];

                if(board[ny][nx]==-1) cnt[i][j]++;
            }
            }
        }
    }


    for(ll i=1; i<=h; i++)
    {
        for(ll j=1; j<=w; j++)
        {
            if(board[i][j]<=cnt[i][j]){
                board[i][j]=-1;
                q.push({i, j});
            }
        }
    }
    bfs();
    cout<<ans;

    return 0;
}
