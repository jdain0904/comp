#include <bits/stdc++.h>
#define ll long long
#define endl "\n"

using namespace std;

ll h, w, cnt;
vector <vector<ll>> board;
queue <pair<ll, ll>> q;
ll dx[]={1, 1, 0, -1, -1, -1, 0, 1};
ll dy[]={0, -1, -1, -1, 0, 1, 1, 1};

bool check(pair<ll, ll> cord)
{
    ll cnt=0;
    for(ll i=0; i<8; i++)
    {
        if(cord.first+dy[i]<0||cord.first+dy[i]>=h||cord.second+dx[i]<0||cord.second+dx[i]>=w) continue;
        if(board[cord.first+dy[i]][cord.second+dx[i]]==-1) cnt++;
    }

    if(cnt>=board[cord.first][cord.second]) return true;
    return false;
}

void bfs()
{
    while(!q.empty())
    {
        pair<ll, ll> x=q.front();
        q.pop();

        if(check(x))
        {
            board[x.first][x.second]=-1;

            for(ll i=0; i<8; i++)
            {
                pair<ll, ll> y={x.first+dy[i], x.second+dx[i]};
                if(y.first<0||y.first>=h||y.second<0||y.second>=w) continue;
                if(board[y.first][y.second]!=-1) q.push(y);
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin>>h>>w;
    board.resize(h, vector<ll>(w));

    for(ll i=0; i<h; i++)
    {
        for(ll j=0; j<w; j++)
        {
            char c;
            cin>>c;
            if(c=='.') board[i][j]=-1;
            else
            {
                q.push({i, j});
                board[i][j]=c-48;
            }
        }
    }

    bfs();

    
    cout<<cnt;

    return 0;
}
