/*
전체 배열 탐색하며
visited=0인데 값!=0인 위치 찾아 bfs 돌리기
2차원 bfs :인접한 부분 전부 탐색
배열 사이즈를 (n+2)로 잡고 1base로 시작하면 인덱스 초과(idx>n||idx<0..) 고려 안하고 문제 풀 수 있음
*/
#include <bits/stdc++.h>
#define ll long long
#define endl "\n"

using namespace std;

vector <vector<ll>> board, visited;
vector <ll>ans;
ll n;
ll dy[]={1, 0, -1, 0};
ll dx[]={0, 1, 0, -1};

void bfs(pair <ll, ll>st)
{
    ll cnt=0;
    queue <pair<ll, ll>>q;
    q.push(st);
    visited[st.first][st.second]=1;

    while(!q.empty())
    {
        ll y=q.front().first;
        ll x=q.front().second;
        cnt++;
        q.pop();

        for(ll i=0; i<4; i++)
        {
            ll ny=y+dy[i];
            ll nx=x+dx[i];

            if(visited[ny][nx]==0&&board[ny][nx]==1)
            {
                visited[ny][nx]=1;
                q.push({ny, nx});
            }
        }
    }
    ans.push_back(cnt);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin>>n;
    board.resize(n+2, vector<ll>(n+2));
    visited.resize(n+2, vector<ll>(n+2));

    for(ll i=1; i<=n; i++){
        for(ll j=1; j<=n; j++){
            char c;
            cin>>c;
            board[i][j]=c-'0';
        }
    }

    for(ll i=1; i<=n; i++)
    {
        for(ll j=1; j<=n; j++)
        {
            if(visited[i][j]==0&&board[i][j]==1){
                bfs({i, j});
            }
        }
    }
    sort(ans.begin(), ans.end());
    cout<<ans.size()<<endl;
    for(ll i:ans) cout<<i<<endl;

    return 0;
}
